def a_star(self):
    start = self.board
    goal = self.goal
    open_list = [(start, 0)]
    closed_list = set()
    iteration = 0

    while open_list:
        open_list.sort(key=lambda x: x[1] + self.manhattan_distance(x[0]))
        current_board, g = open_list.pop(0)

        iteration += 1
        print(f"\nIteration {iteration}:")
        self.print_board(current_board)
        print(f"g(n): {g}, h(n): {self.manhattan_distance(current_board)}, f(n): {g + self.manhattan_distance(current_board)}")

        if current_board == goal:
            print("\nGoal reached!")
            return g

        closed_list.add(tuple(map(tuple, current_board)))

        for neighbor in self.get_neighbors(current_board):
            if tuple(map(tuple, neighbor)) in closed_list:
                continue
            g_new = g + 1
            open_list.append((neighbor, g_new))

    return -1

def print_board(self, board):
    for row in board:
        print(" ".join(str(tile) if tile != 0 else "_" for tile in row))

def take_input():
    print("Enter the initial state (3x3 grid) row by row, use '0' for the blank tile:")
    initial_state = []
    for _ in range(3):
        row = list(map(int, input().split()))
        initial_state.append(row)

    print("Enter the goal state (3x3 grid) row by row, use '0' for the blank tile:")
    goal_state = []
    for _ in range(3):
        row = list(map(int, input().split()))
        goal_state.append(row)

    return initial_state, goal_state

if __name__ == "__main__":
    initial_state, goal_state = take_input()

    puzzle = Puzzle(initial_state, goal_state)
    moves = puzzle.a_star()

    if moves != -1:
        print(f"\nNumber of moves to solve: {moves}")
    else:
        print("\nNo solution found")
